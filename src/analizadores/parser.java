
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 21 22:28:21 CDT 2022
//----------------------------------------------------

package analizadores;

import funciones.Asignacion;
import funciones.Declaracion;
import funciones.Imprimir;
import funciones.If;
import funciones.Instruccion;
import funciones.Mientras;
import funciones.For;
import funciones.Operacion;
import funciones.Simbolo.Tipo;
import funciones.TablaDeSimbolos;
import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 21 22:28:21 CDT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\011" +
    "\000\002\004\006\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\006\000\002\004\011\000\002" +
    "\004\015\000\002\004\020\000\002\004\010\000\002\004" +
    "\013\000\002\004\022\000\002\004\030\000\002\004\003" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\006" +
    "\005\000\002\006\003\000\002\006\003\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\030\003\014\033\006\034\005\036\007\041" +
    "\020\061\004\062\016\072\015\100\013\112\010\121\017" +
    "\001\002\000\004\005\206\001\002\000\004\005\200\001" +
    "\002\000\004\005\170\001\002\000\004\005\145\001\002" +
    "\000\004\041\141\001\002\000\032\002\000\003\014\033" +
    "\006\034\005\036\007\041\020\061\004\062\016\072\015" +
    "\100\013\112\010\121\017\001\002\000\036\002\ufffe\003" +
    "\ufffe\010\ufffe\033\ufffe\034\ufffe\036\ufffe\041\ufffe\044\ufffe" +
    "\061\ufffe\062\ufffe\072\ufffe\100\ufffe\112\ufffe\121\ufffe\001" +
    "\002\000\004\041\135\001\002\000\036\002\uffef\003\uffef" +
    "\010\uffef\033\uffef\034\uffef\036\uffef\041\uffef\044\uffef\061" +
    "\uffef\062\uffef\072\uffef\100\uffef\112\uffef\121\uffef\001\002" +
    "\000\004\005\110\001\002\000\004\041\063\001\002\000" +
    "\004\041\057\001\002\000\010\005\023\011\025\040\024" +
    "\001\002\000\004\002\022\001\002\000\004\002\001\001" +
    "\002\000\004\006\052\001\002\000\014\005\031\016\033" +
    "\027\035\030\034\041\032\001\002\000\004\035\026\001" +
    "\002\000\004\004\027\001\002\000\036\002\ufffb\003\ufffb" +
    "\010\ufffb\033\ufffb\034\ufffb\036\ufffb\041\ufffb\044\ufffb\061" +
    "\ufffb\062\ufffb\072\ufffb\100\ufffb\112\ufffb\121\ufffb\001\002" +
    "\000\014\004\051\015\037\016\041\017\042\020\040\001" +
    "\002\000\014\005\031\016\033\027\035\030\034\041\032" +
    "\001\002\000\030\004\uffe6\006\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\001\002\000\014\005\031\016\033\027\035\030\034\041" +
    "\032\001\002\000\030\004\uffe7\006\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\001\002\000\030\004\uffe8\006\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\001\002\000\030\004\uffee\006\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\001\002\000\014\005\031\016\033\027\035\030\034" +
    "\041\032\001\002\000\014\005\031\016\033\027\035\030" +
    "\034\041\032\001\002\000\014\005\031\016\033\027\035" +
    "\030\034\041\032\001\002\000\014\005\031\016\033\027" +
    "\035\030\034\041\032\001\002\000\030\004\uffeb\006\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\001\002\000\030\004\uffec\006\uffec" +
    "\015\uffec\016\uffec\017\042\020\040\021\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\001\002\000\030\004\uffea\006\uffea" +
    "\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\001\002\000\030\004\uffed\006\uffed" +
    "\015\uffed\016\uffed\017\042\020\040\021\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\001\002\000\014\006\050\015\037" +
    "\016\041\017\042\020\040\001\002\000\030\004\uffe9\006" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\001\002\000\036\002\ufff7\003" +
    "\ufff7\010\ufff7\033\ufff7\034\ufff7\036\ufff7\041\ufff7\044\ufff7" +
    "\061\ufff7\062\ufff7\072\ufff7\100\ufff7\112\ufff7\121\ufff7\001" +
    "\002\000\004\007\053\001\002\000\030\003\014\033\006" +
    "\034\005\036\007\041\020\061\004\062\016\072\015\100" +
    "\013\112\010\121\017\001\002\000\032\003\014\010\056" +
    "\033\006\034\005\036\007\041\020\061\004\062\016\072" +
    "\015\100\013\112\010\121\017\001\002\000\036\002\uffff" +
    "\003\uffff\010\uffff\033\uffff\034\uffff\036\uffff\041\uffff\044" +
    "\uffff\061\uffff\062\uffff\072\uffff\100\uffff\112\uffff\121\uffff" +
    "\001\002\000\036\002\ufff3\003\ufff3\010\ufff3\033\ufff3\034" +
    "\ufff3\036\ufff3\041\ufff3\044\ufff3\061\ufff3\062\ufff3\072\ufff3" +
    "\100\ufff3\112\ufff3\121\ufff3\001\002\000\004\011\060\001" +
    "\002\000\004\035\061\001\002\000\004\004\062\001\002" +
    "\000\036\002\ufff8\003\ufff8\010\ufff8\033\ufff8\034\ufff8\036" +
    "\ufff8\041\ufff8\044\ufff8\061\ufff8\062\ufff8\072\ufff8\100\ufff8" +
    "\112\ufff8\121\ufff8\001\002\000\004\005\064\001\002\000" +
    "\006\006\065\041\066\001\002\000\004\011\103\001\002" +
    "\000\004\011\067\001\002\000\004\035\070\001\002\000" +
    "\004\014\071\001\002\000\004\041\072\001\002\000\004" +
    "\011\073\001\002\000\004\035\074\001\002\000\004\006" +
    "\075\001\002\000\004\011\076\001\002\000\004\035\077" +
    "\001\002\000\004\007\100\001\002\000\030\003\014\033" +
    "\006\034\005\036\007\041\020\061\004\062\016\072\015" +
    "\100\013\112\010\121\017\001\002\000\032\003\014\010" +
    "\102\033\006\034\005\036\007\041\020\061\004\062\016" +
    "\072\015\100\013\112\010\121\017\001\002\000\036\002" +
    "\ufff1\003\ufff1\010\ufff1\033\ufff1\034\ufff1\036\ufff1\041\ufff1" +
    "\044\ufff1\061\ufff1\062\ufff1\072\ufff1\100\ufff1\112\ufff1\121" +
    "\ufff1\001\002\000\004\035\104\001\002\000\004\007\105" +
    "\001\002\000\030\003\014\033\006\034\005\036\007\041" +
    "\020\061\004\062\016\072\015\100\013\112\010\121\017" +
    "\001\002\000\032\003\014\010\107\033\006\034\005\036" +
    "\007\041\020\061\004\062\016\072\015\100\013\112\010" +
    "\121\017\001\002\000\036\002\ufff2\003\ufff2\010\ufff2\033" +
    "\ufff2\034\ufff2\036\ufff2\041\ufff2\044\ufff2\061\ufff2\062\ufff2" +
    "\072\ufff2\100\ufff2\112\ufff2\121\ufff2\001\002\000\004\041" +
    "\111\001\002\000\004\006\112\001\002\000\004\007\113" +
    "\001\002\000\004\042\114\001\002\000\004\027\115\001" +
    "\002\000\004\011\116\001\002\000\004\007\117\001\002" +
    "\000\030\003\014\033\006\034\005\036\007\041\020\061" +
    "\004\062\016\072\015\100\013\112\010\121\017\001\002" +
    "\000\032\003\014\033\006\034\005\036\007\041\020\044" +
    "\121\061\004\062\016\072\015\100\013\112\010\121\017" +
    "\001\002\000\004\004\122\001\002\000\004\010\123\001" +
    "\002\000\004\042\124\001\002\000\004\027\125\001\002" +
    "\000\004\011\126\001\002\000\004\007\127\001\002\000" +
    "\030\003\014\033\006\034\005\036\007\041\020\061\004" +
    "\062\016\072\015\100\013\112\010\121\017\001\002\000" +
    "\032\003\014\033\006\034\005\036\007\041\020\044\131" +
    "\061\004\062\016\072\015\100\013\112\010\121\017\001" +
    "\002\000\004\004\132\001\002\000\004\010\133\001\002" +
    "\000\004\010\134\001\002\000\036\002\ufff0\003\ufff0\010" +
    "\ufff0\033\ufff0\034\ufff0\036\ufff0\041\ufff0\044\ufff0\061\ufff0" +
    "\062\ufff0\072\ufff0\100\ufff0\112\ufff0\121\ufff0\001\002\000" +
    "\004\011\136\001\002\000\004\035\137\001\002\000\004" +
    "\004\140\001\002\000\036\002\ufffa\003\ufffa\010\ufffa\033" +
    "\ufffa\034\ufffa\036\ufffa\041\ufffa\044\ufffa\061\ufffa\062\ufffa" +
    "\072\ufffa\100\ufffa\112\ufffa\121\ufffa\001\002\000\004\011" +
    "\142\001\002\000\004\035\143\001\002\000\004\004\144" +
    "\001\002\000\036\002\ufff9\003\ufff9\010\ufff9\033\ufff9\034" +
    "\ufff9\036\ufff9\041\ufff9\044\ufff9\061\ufff9\062\ufff9\072\ufff9" +
    "\100\ufff9\112\ufff9\121\ufff9\001\002\000\014\005\031\016" +
    "\033\027\035\030\034\041\032\001\002\000\004\006\160" +
    "\001\002\000\022\015\037\016\041\017\042\020\040\023" +
    "\151\024\150\025\152\026\153\001\002\000\014\005\031" +
    "\016\033\027\035\030\034\041\032\001\002\000\014\005" +
    "\031\016\033\027\035\030\034\041\032\001\002\000\014" +
    "\005\031\016\033\027\035\030\034\041\032\001\002\000" +
    "\014\005\031\016\033\027\035\030\034\041\032\001\002" +
    "\000\016\004\uffdf\006\uffdf\015\037\016\041\017\042\020" +
    "\040\001\002\000\016\004\uffe0\006\uffe0\015\037\016\041" +
    "\017\042\020\040\001\002\000\016\004\uffe1\006\uffe1\015" +
    "\037\016\041\017\042\020\040\001\002\000\016\004\uffe2" +
    "\006\uffe2\015\037\016\041\017\042\020\040\001\002\000" +
    "\004\007\161\001\002\000\030\003\014\033\006\034\005" +
    "\036\007\041\020\061\004\062\016\072\015\100\013\112" +
    "\010\121\017\001\002\000\032\003\014\010\163\033\006" +
    "\034\005\036\007\041\020\061\004\062\016\072\015\100" +
    "\013\112\010\121\017\001\002\000\040\002\ufff6\003\ufff6" +
    "\010\ufff6\033\ufff6\034\ufff6\036\ufff6\037\164\041\ufff6\044" +
    "\ufff6\061\ufff6\062\ufff6\072\ufff6\100\ufff6\112\ufff6\121\ufff6" +
    "\001\002\000\004\007\165\001\002\000\030\003\014\033" +
    "\006\034\005\036\007\041\020\061\004\062\016\072\015" +
    "\100\013\112\010\121\017\001\002\000\032\003\014\010" +
    "\167\033\006\034\005\036\007\041\020\061\004\062\016" +
    "\072\015\100\013\112\010\121\017\001\002\000\036\002" +
    "\ufff5\003\ufff5\010\ufff5\033\ufff5\034\ufff5\036\ufff5\041\ufff5" +
    "\044\ufff5\061\ufff5\062\ufff5\072\ufff5\100\ufff5\112\ufff5\121" +
    "\ufff5\001\002\000\016\005\031\016\033\027\035\030\034" +
    "\031\173\041\032\001\002\000\016\006\uffe3\015\037\016" +
    "\041\017\042\020\040\021\uffe3\001\002\000\006\006\174" +
    "\021\175\001\002\000\006\006\uffe4\021\uffe4\001\002\000" +
    "\004\004\177\001\002\000\016\005\031\016\033\027\035" +
    "\030\034\031\173\041\032\001\002\000\006\006\uffe5\021" +
    "\uffe5\001\002\000\036\002\ufffd\003\ufffd\010\ufffd\033\ufffd" +
    "\034\ufffd\036\ufffd\041\ufffd\044\ufffd\061\ufffd\062\ufffd\072" +
    "\ufffd\100\ufffd\112\ufffd\121\ufffd\001\002\000\014\005\031" +
    "\016\033\027\035\030\034\041\032\001\002\000\004\006" +
    "\202\001\002\000\004\007\203\001\002\000\030\003\014" +
    "\033\006\034\005\036\007\041\020\061\004\062\016\072" +
    "\015\100\013\112\010\121\017\001\002\000\032\003\014" +
    "\010\205\033\006\034\005\036\007\041\020\061\004\062" +
    "\016\072\015\100\013\112\010\121\017\001\002\000\036" +
    "\002\ufffc\003\ufffc\010\ufffc\033\ufffc\034\ufffc\036\ufffc\041" +
    "\ufffc\044\ufffc\061\ufffc\062\ufffc\072\ufffc\100\ufffc\112\ufffc" +
    "\121\ufffc\001\002\000\004\041\207\001\002\000\004\040" +
    "\210\001\002\000\014\005\031\016\033\027\035\030\034" +
    "\041\032\001\002\000\014\004\212\015\037\016\041\017" +
    "\042\020\040\001\002\000\014\005\031\016\033\027\035" +
    "\030\034\041\032\001\002\000\004\004\214\001\002\000" +
    "\004\041\215\001\002\000\004\022\216\001\002\000\004" +
    "\006\217\001\002\000\004\007\220\001\002\000\030\003" +
    "\014\033\006\034\005\036\007\041\020\061\004\062\016" +
    "\072\015\100\013\112\010\121\017\001\002\000\032\003" +
    "\014\010\222\033\006\034\005\036\007\041\020\061\004" +
    "\062\016\072\015\100\013\112\010\121\017\001\002\000" +
    "\036\002\ufff4\003\ufff4\010\ufff4\033\ufff4\034\ufff4\036\ufff4" +
    "\041\ufff4\044\ufff4\061\ufff4\062\ufff4\072\ufff4\100\ufff4\112" +
    "\ufff4\121\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\010\002\020\003\010\004\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\046" +
    "\001\001\000\002\001\001\000\004\005\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\045\001\001\000\004\005\044\001\001\000\004\005" +
    "\043\001\001\000\004\005\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\053\004\011\001\001\000\004\004" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\100\004\011\001\001\000\004\004\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\105\004\011\001\001\000\004\004\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\117\004" +
    "\011\001\001\000\004\004\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\127\004\011" +
    "\001\001\000\004\004\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\146\007\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\156\001\001" +
    "\000\004\005\155\001\001\000\004\005\154\001\001\000" +
    "\004\005\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\161\004\011\001\001\000\004\004\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\165\004" +
    "\011\001\001\000\004\004\054\001\001\000\002\001\001" +
    "\000\006\005\170\006\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\170\006\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\146\007\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\203\004\011\001\001\000" +
    "\004\004\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\210\001\001\000\002\001" +
    "\001\000\006\005\146\007\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\220\004\011\001\001\000\004" +
    "\004\054\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Variable en la que se almacena el funciones de sintaxis abstracta que se 
     * genera luego del analisis sintáctico.
     */
    public LinkedList<Instruccion> AST;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
    /**
     * Método que devuelve el AST que se generó después de realizar el análisis sintáctico. 
     * @return árbol de sintaxis abstacta que será utilizado posteriormente en la ejecución.
     */
    public LinkedList<Instruccion> getAST() {
        return AST;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_logica ::= expresion_numerica NIGUALQUE expresion_numerica 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b, Operacion.Tipo_operacion.NO_IGUAL_QUE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_logica ::= expresion_numerica IGUALQUE expresion_numerica 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b, Operacion.Tipo_operacion.IGUAL_QUE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_logica ::= expresion_numerica MENQUE expresion_numerica 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b, Operacion.Tipo_operacion.MENOR_QUE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_logica ::= expresion_numerica MAYQUE expresion_numerica 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b, Operacion.Tipo_operacion.MAYOR_QUE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_cadena ::= expresion_numerica 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_cadena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_cadena ::= CADENA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.CADENA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_cadena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_cadena ::= expresion_cadena CONCAT expresion_cadena 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.CONCATENACION);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_cadena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_numerica ::= IDENTIFICADOR 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_numerica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_numerica ::= DECIMAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(new Double(a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_numerica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_numerica ::= ENTERO 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(new Double(a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_numerica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_numerica ::= PARIZQ expresion_numerica PARDER 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_numerica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_numerica ::= expresion_numerica DIVIDIDO expresion_numerica 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_numerica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_numerica ::= expresion_numerica POR expresion_numerica 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_numerica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_numerica ::= expresion_numerica MENOS expresion_numerica 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_numerica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion_numerica ::= expresion_numerica MAS expresion_numerica 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_numerica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion_numerica ::= MENOS expresion_numerica 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_numerica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= SWITCH PARIZQ IDENTIFICADOR PARDER LLAVIZQ CASE ENTERO DOS_PUNTOS LLAVIZQ instrucciones BREAK PTCOMA LLAVDER CASE ENTERO DOS_PUNTOS LLAVIZQ instrucciones BREAK PTCOMA LLAVDER LLAVDER 
            {
              Instruccion RESULT =null;
		System.out.println("Switch case");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= FUNCTION IDENTIFICADOR PARIZQ IDENTIFICADOR DOS_PUNTOS RNUMERO COMA IDENTIFICADOR DOS_PUNTOS RNUMERO PARDER DOS_PUNTOS RNUMERO LLAVIZQ instrucciones LLAVDER 
            {
              Instruccion RESULT =null;
		System.out.println("Funcion con dos parametros");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= FUNCTION IDENTIFICADOR PARIZQ PARDER DOS_PUNTOS RNUMERO LLAVIZQ instrucciones LLAVDER 
            {
              Instruccion RESULT =null;
		System.out.println("Function");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= IDENTIFICADOR PARIZQ PARDER LLAVIZQ instrucciones LLAVDER 
            {
              Instruccion RESULT =null;
		System.out.println("Method");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= FOR PARIZQ IDENTIFICADOR IGUAL expresion_numerica PTCOMA expresion_logica PTCOMA IDENTIFICADOR MASMAS PARDER LLAVIZQ instrucciones LLAVDER 
            {
              Instruccion RESULT =null;
		System.out.println("Ciclo for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= RIF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER RELSE LLAVIZQ instrucciones LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new If(a,b,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= RIF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new If(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= IDENTIFICADOR IGUAL expresion_numerica PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Asignacion(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= LET IDENTIFICADOR DOS_PUNTOS RNUMERO PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=new Declaracion(a,Tipo.NUMERO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= SET IDENTIFICADOR DOS_PUNTOS RNUMERO PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=new Declaracion(a,Tipo.NUMERO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= VAR IDENTIFICADOR DOS_PUNTOS RNUMERO PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=new Declaracion(a,Tipo.NUMERO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= IDENTIFICADOR DOS_PUNTOS RNUMERO PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=new Declaracion(a,Tipo.NUMERO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= RMIENTRAS PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Mientras(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= RIMPRIMIR PARIZQ expresion_cadena PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=new Imprimir(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //se guarda el AST, que es la lista principal de instrucciones en la variable
    //AST que se definió dentro del parser
    parser.AST=a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

